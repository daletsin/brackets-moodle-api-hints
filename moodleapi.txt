$capabilities = array('mod/MYPLUGIN:MYCAPABILITY' => array('riskbitmask' => RISK_SPAM, 'captype' => 'write', 'contextlevel' => CONTEXT_MODULE, 'archetypes' => array('editingteacher' => CAP_ALLOW)),)
context_system::instance()
context_user::instance($user->id)
context_coursecat::instance($category->id)
context_course::instance($course->id)
context_module::instance($cm->id)
context::instance_by_id($contextid)
get_context_instance($contextlevel, $instance = 0, $strictness = IGNORE_MISSING)
get_context_instance_by_id($id, $strictness = IGNORE_MISSING)
has_capability($capability, context $context, $user = null, $doanything = true)
require_capability($capability, context $context, $userid = null, $doanything = true, $errormessage = 'nopermissions', $stringfile = '')
require_login($courseorid = NULL, $autologinguest = true, $cm = NULL, $setwantsurltome = true, $preventredirect = false)
require_course_login($courseorid, $autologinguest = true, $cm = NULL, $setwantsurltome = true, $preventredirect = false)
get_users_by_capability(context $context, $capability, $fields = '', $sort = '', $limitfrom = '', $limitnum = '', $groups = '', $exceptions = '', $doanything_ignored = null, $view_ignored = null, $useviewallgroups = false)
isguestuser($user = null)
isloggedin()
is_siteadmin($user_or_id = null)
is_guest(context $context, $user = null)
is_viewing(context $context, $user = null, $withcapability = '')
is_enrolled()
is_viewing()
is_guest()
get_users_by_capability()
$DB->get_manager()
$DB->get_record($table, array $conditions, $fields='*', $strictness=IGNORE_MISSING) 
$DB->get_record_select($table, $select, array $params=null, $fields='*', $strictness=IGNORE_MISSING)
$DB->get_record_sql($sql, array $params=null, $strictness=IGNORE_MISSING)
$DB->get_records($table, array $conditions=null, $sort='', $fields='*', $limitfrom=0, $limitnum=0)
$DB->get_records_select($table, $select, array $params=null, $sort='', $fields='*', $limitfrom=0, $limitnum=0)
$DB->get_records_sql($sql, array $params=null, $limitfrom=0, $limitnum=0)
$DB->get_records_list($table, $field, array $values, $sort='', $fields='*', $limitfrom='', $limitnum='')
$DB->get_records_menu($table, array $conditions=null, $sort='', $fields='*', $limitfrom=0, $limitnum=0)
$DB->get_records_select_menu($table, $select, array $params=null, $sort='', $fields='*', $limitfrom=0, $limitnum=0)
$DB->get_records_sql_menu($sql, array $params=null, $limitfrom=0, $limitnum=0)
$DB->record_exists($table, array $conditions=null)
$DB->record_exists_select($table, $select, array $params=null)
$DB->record_exists_sql($sql, array $params=null)
$DB->get_field($table, $return, array $conditions, $strictness=IGNORE_MISSING)
$DB->get_field_select($table, $return, $select, array $params=null, $strictness=IGNORE_MISSING)
$DB->get_field_sql($sql, array $params=null, $strictness=IGNORE_MISSING)
$DB->get_fieldset_select($table, $return, $select, array $params=null)
$DB->get_fieldset_sql($sql, array $params=null)
$DB->set_field($table, $newfield, $newvalue, array $conditions=null)
$DB->set_field_select($table, $newfield, $newvalue, $select, array $params=null)
$DB->delete_records($table, array $conditions=null)
$DB->delete_records_select($table, $select, array $params=null)
$DB->insert_record($table, $dataobject, $returnid=true, $bulk=false)
$DB->update_record($table, $dataobject, $bulk=false)
$DB->execute($sql, array $parms=null)
$DB->get_recordset($table, array $conditions=null, $sort='', $fields='*', $limitfrom=0, $limitnum=0)
$DB->get_recordset_select($table, $select, array $params=null, $sort='', $fields='*', $limitfrom=0, $limitnum=0)
$DB->get_recordset_sql($sql, array $params=null, $limitfrom=0, $limitnum=0)
$DB->get_recordset_list($table, $field='', $values='', $sort='', $fields='*', $limitfrom='', $limitnum='')
$DB->start_delegated_transaction()
allow_commit()
$DB->sql_bitand($int1, $int2)
$DB->sql_bitnot($int1)
$DB->sql_bitor($int1, $int2)
$DB->sql_bitxor($int1, $int2)
$DB->sql_null_from_clause()
$DB->sql_ceil($fieldname)
$DB->sql_like($fieldname, $param, $casesensitive = true, $accentsensitive = true, $notlike = false, $escapechar = ' \\ ')
$DB->get_records_sql('SELECT ...  WHERE '.$DB->sql_like('idnumber', ':idnum').' ... ', array( 'idnum' => 'foo'))
$DB->sql_length($fieldname)
$DB->sql_modulo($int1, $int2)
$DB->sql_position($needle, $haystack)
$DB->sql_substr($expr, $start, $length=false)
$DB->sql_cast_char2int($fieldname, $text=false)
$DB->sql_cast_char2real($fieldname, $text=false)
$DB->sql_compare_text($fieldname, $numchars=32)
$DB->sql_order_by_text($fieldname, $numchars=32)
$DB->sql_concat()
$DB->sql_concat_join($separator="' '", $elements=array())
$DB->sql_fullname($first='firstname', $last='lastname')
$DB->sql_isempty($tablename, $fieldname, $nullablefield, $textfield)
$DB->sql_isnotempty($tablename, $fieldname, $nullablefield, $textfield)
$DB->sql_empty()
$DB->set_debug(true)
get_course($courseid)
get_file_content('userfile')
get_new_filename('userfile')
save_file('userfile', $fullpath, $override)
save_stored_file('userfile', ...)
file_get_submitted_draft_itemid('entry')
file_prepare_draft_area($draftid_editor, $context->id, 'mod_MYMOD', 'entry', $entry->id, array('subdirs'=>true), $entry->definition)
file_save_draft_area_files($data->attachments, $context->id, 'mod_glossary', 'attachment', $entry->id, array('subdirs' => 0, 'maxbytes' => $maxbytes, 'maxfiles' => 50))
file_rewrite_pluginfile_urls($messagetext, 'pluginfile.php', $context->id, 'mod_mymodule', 'proper_file_area', $itemid)
file_prepare_standard_editor($data, 'textfield', $textfieldoptions, $context, 'mod_somemodule', 'somearea', $data->id)
file_prepare_standard_filemanager($entry, 'attachment', $attachmentoptions, $context, 'mod_mymod', 'attachment', $entry->id)
file_postupdate_standard_filemanager($entry, 'attachment', $attachmentoptions, $context, 'mod_mymod', 'attachment', $entry->id)
file_postupdate_standard_editor($data, 'textfield', $textfieldoptions, $context, 'mod_somemodule', 'somearea', $data->id)
make_pluginfile_url($file->get_contextid(), $file->get_component(), $file->get_filearea(), $file->get_itemid(), $file->get_filepath(), $file->get_filename())
myPLUGIN_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload, array $options=array())
get_file_storage()
get_file($context->id, 'mod_MYPLUGIN', $filearea, $itemid, $filepath, $filename)
send_file($file, 86400, 0, $forcedownload, $options)
get_file_browser()
get_system_context()
get_file_info($context, $component, $filearea, $itemid, '/', $filename)
get_parent()
get_children()
is_directory()
get_visible_name()
get_params()
create_file_from_pathname($file_record, $from_zip_file)
get_area_files($contextid, 'mod_MYMOD', 'AREA', $submission->id)
get_filename()
get_itemid()
get_filepath()
get_component()
get_contextid()
get_filearea()
$fileinfo = array('contextid' => $context->id, 'component' => 'mod_MYMOD', 'filearea' => 'myarea', 'itemid' => 0, 'filepath' => '/', 'filename' => 'myfile.txt')
create_file_from_string($fileinfo, 'hello world')
get_file($fileinfo['contextid'], $fileinfo['component'], $fileinfo['filearea'], $fileinfo['itemid'], $fileinfo['filepath'], $fileinfo['filename'])
get_content()
delete()
addElement('button', 'intro', get_string("buttonlabel"))
addElement('checkbox', 'ratingtime', get_string('ratingtime', 'forum'))
addElement('advcheckbox', 'ratingtime', get_string('ratingtime', 'forum'), 'Label displayed after checkbox', array('group' => 1), array(0, 1))
addElement('choosecoursefile', 'mediafile', get_string('mediafile', 'lesson'), array('courseid'=>$COURSE->id))
addGroupRule('elementname', array('value' => array(array(list, of, rule, params, but, fieldname))))
addElement('date_time_selector', 'assesstimestart', get_string('from'))
createElement('radio', 'yesno', '', get_string('yes'), 1, $attributes)
setDefault('yesno', 0)
addElement('select', 'type', get_string('forumtype', 'forum'), $FORUM_TYPES, $attributes)
setMultiple(true)
addElement('password', 'password', get_string('label'), $attributes)
addElement('hidden', 'reply', 'yes')
addElement('html', '<div class="qheader">')
addElement('modgrade', 'scale', get_string('grade'), false)
addElement('static', 'description', get_string('description', 'exercise'),get_string('descriptionofexercise', 'exercise', $COURSE->students))
addElement('text', 'name', get_string('forumname', 'forum'), $attributes)
addElement('textarea', 'introduction', get_string("introtext", "survey"), 'wrap="virtual" rows="20" cols="50"')
addElement('recaptcha', 'recaptcha_field_name', $attributes)
addElement('passwordunmask', 'password', get_string('label'), $attributes)
addElement('selectyesno', 'maxbytes', get_string('maxattachmentsize', 'forum'))
addElement('selectwithlink', 'scaleid', get_string('scale'), $options, null, array('link' => URL, 'label' => get_string('scalescustomcreate')))
addElement('date_selector', 'assesstimefinish', get_string('to'))
addElement('duration', 'timelimit', get_string('timelimit', 'quiz'))
addElement('editor', 'fieldname', get_string('labeltext', 'langfile'))
addElement('filepicker', 'userfile', get_string('file'), null, array('maxbytes' => $maxbytes, 'accepted_types' => '*'))
addElement('filemanager', 'attachments', get_string('attachment', 'moodle'), null,array('subdirs' => 0, 'maxbytes' => $maxbytes, 'maxfiles' => 50, 'accepted_types' => array('document') ))
addElement('tags', 'field_name', $lable, $options, $attributes)
addGroup($buttonarray, 'buttonar', '', array(' '), false)
addElement('modvisible', 'visible', get_string('visible'))
addElement('choosecoursefile', 'mediafile', get_string('mediafile', 'lesson'), array('courseid'=>$COURSE->id))
addElement('grading', 'advancedgrading', get_string('grade').':', array('gradinginstance' => $gradinginstance))
addElement('questioncategory', 'category', get_string('category', 'question'), array('contexts'=>$contexts, 'top'=>true, 'currentcat'=>$currentcat, 'nochildrenof'=>$currentcat))
disabledIf('mycontrol', 'somecheckbox')
disabledIf('mycontrol', 'somecheckbox', 'checked')
disabledIf('mycontrol', 'someselect', 'eq', 42)
disabledIf('mycontrol', 'someselect', 'neq', 42)
addRule('elementname', get_string('error'), 'rule type', 'extraruledata', 'server'(default), false, false)
setHelpButton('lessondefault', array('lessondefault', get_string('lessondefault', 'lesson'), 'lesson'))
addHelpButton('api_key_field', 'api_key', 'block_extsearch')
disable_form_change_checker()
setType()
add_to_log($courseid, $module, $action, $url='', $info='', $cm=0, $user=0)
user_accesstime_log($courseid=0)
get_logs($select, array $params=null, $order='l.time DESC', $limitfrom='', $limitnum='', &$totalcount)
get_logs_usercourse($userid, $courseid, $coursestart)
get_logs_userday($userid, $courseid, $daystart)
$PAGE->navbar->ignore_active()
$PAGE->navbar->add(get_string('preview'), new moodle_url('/a/link/if/you/want/one.php'))
$PAGE->navbar->add(get_string('name of thing'), new moodle_url('/a/link/if/you/want/one.php'))
make_active()
$PAGE->settingsnav->add(get_string('setting'), new moodle_url('/a/link/if/you/want/one.php'), navigation_node::TYPE_CONTAINER)
$PAGE->navigation->find($courseid, navigation_node::TYPE_COURSE)
$PAGE->set_url(new moodle_url('/page/to/your/file.php', array('key' => 'value', 'id' => 3)))
$PAGE->context
$PAGE->course
$PAGE->cm
$PAGE->url
required_param('id', PARAM_INT)
get_coursemodule_from_id('mymodulename', $cmid, 0, false, MUST_EXIST)
$PAGE->set_url('/mod/mymodulename/view.php', array('id' => $cm->id))
$PAGE->set_title('My modules page title')
$PAGE->set_heading('My modules page heading')
$PAGE->set_context(context_system::instance())
$PAGE->set_context(context_coursecat::instance($categoryid))
$PAGE->set_context(context_course::instance($courseid))
$PAGE->set_context(context_module::instance($moduleid))
$PAGE->set_pagelayout('standard')
$PAGE->set_activity_record($activityrecord)
$PAGE->set_blocks_editing_capability($strcapability)
$PAGE->set_button($htmlstring)
$PAGE->set_cacheable(true/false)
$PAGE->set_category_by_id($categoryid)
$PAGE->set_cm($coursemodulerecord)
$PAGE->set_course($courserecord)
$PAGE->set_docs_path($strpath)
$PAGE->set_focuscontrol($controlid)
$PAGE->set_headingmenu($htmlstring)
$PAGE->set_other_editing_capability($strcapability)
$PAGE->set_pagetype($strpagetype)
$PAGE->set_periodic_refresh_delay($intdelay)
$PAGE->set_popup_notification_allowed(true/false)
$PAGE->set_subpage($strsubpage)
$PAGE->add_body_class($strcssclass)
$PAGE->add_body_classes($arrayofclasses)
$PAGE->activityrecord
$PAGE->blockmanager
$PAGE->bodyid
$PAGE->categories
$PAGE->category
$PAGE->devicetypeinuse
$PAGE->headerprinted
$PAGE->heading
$PAGE->navbar
$PAGE->requires
$PAGE->settingsnav
$PAGE->theme
$PAGE->title
$OUTPUT->label(html_label $label)
$OUTPUT->link($link)
$OUTPUT->image()
$OUTPUT->form($form, $contents)
$OUTPUT->confirm($message, $formcontinue, $formcancel)
$OUTPUT->button($formwithbutton)
$OUTPUT->htmllist($list)
html_writer::table($table)
$OUTPUT->select($select)
html_select::make($options, 'choice1', 'value1')
html_select::make_time_selector('days', 'myday', '120308000')
$OUTPUT->checkbox($checkbox, 'donotask')
$OUTPUT->old_icon_url('moodlelogo')
$OUTPUT->action_icon($icon)
$OUTPUT->box('A message of some kind')
$OUTPUT->box_start()
$OUTPUT->box_end()
$OUTPUT->close_window_button()
$OUTPUT->confirm('Are you sure?', '/index.php?delete=1', '/index.php')
$OUTPUT->container('A message of some kind', 'important', 'notice')
$OUTPUT->container_start('important', 'notice')
$OUTPUT->container_end()
$OUTPUT->continue_button(new moodle_url('http://domain.com/index.php', array('id' => 2, 'userid' => 4)))
$OUTPUT->error_text("It's all broken!")
$OUTPUT->footer()
$OUTPUT->header()
$OUTPUT->heading(get_string('help'), 3, 'helptitle', 'uniqueid')
$OUTPUT->heading_with_help($helpicon)
$OUTPUT->help_icon($helpicon)
$OUTPUT->textfield($field)
$OUTPUT->paging_bar($pagingbar)
$OUTPUT->user_picture($userpic)
get_string('module_pluginlangfilename', 'plugintitle')
print_string('module_pluginlangfilename', 'plugintitle')
get_strings(array('enable', 'disable', 'up', 'down', 'none'), 'qtype_dragdrop')
asort()
code2utf8($string)
convert($string)
encode_mimeheader($string)
entities_to_utf8($string)
specialtoascii($string)
strlen($string)
strpos($string)
strrpos($string)
strtolower($string)
strtotitle($string)
strtoupper($string)
substr($string)
trim_utf8_bom($string)
utf8_to_entities($string)
$plugin->version
$plugin->requires
$plugin->dependencies
add(new admin_setting_FIELDTYPE('MYMOD/MYNAME', 'MYNAME', 'MYDESC', array('value' => '0', 'fix' => false), PARAM_INT))
get_fast_modinfo($course)
filter_user_list($users)
define_my_steps()
set_source_table()
set_source_sql()
prepare_activity_structure()
calendar_event::create($properties)
calendar_event::update($data, $checkcapability = true)
calendar_event_hook($action, array $args)
calendar_get_default_courses()
calendar_get_days()
calendar_get_starting_weekday()
calendar_day_representation($tstamp, $now = false, $usecommonwords = true)
calendar_time_representation($time)
calendar_wday_name($englishname)
calendar_days_in_month($month, $year)
calendar_get_link_href($linkbase, $d, $m, $y)
calendar_get_mini($courses, $groups, $users, $cal_month = false, $cal_year = false)
calendar_get_popup($is_today, $event_timestart, $popupcontent = '') 
calendar_add_month($month, $year)
calendar_sub_month($month, $year)
calendar_get_module_cached(&$coursecache, $modulename, $instance) 
calendar_get_course_cached(&$coursecache, $courseid)
calendar_print_month_selector($name, $selected)
calendar_top_controls($type, $data)
calendar_filter_controls(moodle_url $returnurl)
calendar_preferences_button(stdClass $course)
calendar_set_filters(array $courseeventsfrom, $ignorefilters = false)
calendar_get_link_previous($text, $linkbase, $d, $m, $y, $accesshide = false)
calendar_get_link_next($text, $linkbase, $d, $m, $y, $accesshide = false)
calendar_get_allowed_types(&$allowed, $course = null)
calendar_add_event_allowed($event) 
calendar_edit_event_allowed($event)
calendar_user_can_add_event($course)
calendar_show_event_type($type, $user = null)
calendar_set_event_type_display($type, $display = null, $user = null)
calendar_get_events($tstart, $tend, $users, $groups, $courses, $withduration = true, $ignorehidden = true)
calendar_events_by_day($events, $month, $year, &$eventsbyday, &$durationbyday, &$typesbyday, &$courses) 
calendar_get_upcoming($courses, $groups, $users, $daysinfuture, $maxevents, $fromtime = 0)
calendar_get_block_upcoming($events, $linkhref = NULL)
calendar_format_event_time($event, $now, $linkparams = null, $usecommonwords = true, $showtime = 0)
calendar_add_event_metadata($event)
table_exists($table)
create_table($table, $continue=true, $feedback=true)
drop_table($table, $continue=true, $feedback=true)
rename_table($table, $newname, $continue=true, $feedback=true)
field_exists($table, $field)
add_field($table, $field, $continue=true, $feedback=true)
drop_field($table, $field, $continue=true, $feedback=true)
change_field_type($table, $field, $continue=true, $feedback=true)
change_field_precision($table, $field, $continue=true, $feedback=true)
change_field_unsigned($table, $field, $continue=true, $feedback=true)
change_field_notnull($table, $field, $continue=true, $feedback=true)
drop_enum_from_field($table, $field, $continue=true, $feedback=true)
change_field_default($table, $field, $continue=true, $feedback=true)
rename_field($table, $field, $newname, $continue=true, $feedback=true)
index_exists($table, $index)
find_index_name($table, $index)
add_index($table, $index, $continue=true, $feedback=true)
drop_index($table, $index, $continue=true, $feedback=true)
is_enrolled(context $context, $user = null, $withcapability = '', $onlyactive = false)
get_enrolled_sql(context $context, $withcapability = '', $groupid = 0, $onlyactive = false)
get_enrolled_users(context $context, $withcapability = '', $groupid = 0, $userfields = 'u.*', $orderby = '', $limitfrom = 0, $limitnum = 0)
count_enrolled_users(context $context, $withcapability = '', $groupid = 0)
events_trigger('user_enrolled', $ue)
$handlers = array ( 'user_enrolled' => array ('handlerfile' => '/mod/MYMOD/lib.php', 'handlerfunction'  => 'MYMODFUNCTION', 'schedule'         => 'instant', 'internal' => 1,))
$messageproviders = array ('MYPROVIDER' => array ())
message_send($eventdata)
$PAGE->get_renderer('core', 'media')
get_user_preferences($name = null, $default = null, $user = null)
set_user_preference($name, $value, $user = null)
set_user_preferences(array $prefarray, $user = null)
unset_user_preference($name, $user = null)
get_ratings()
get_user_grades()
delete_ratings()
tag_set('user', $userId, array())
tag_get_tags('user', $userId)
tag_set_add('user', $userId, 'chess')
tag_set_delete('user', $userId, 'chess')
tag_description_set($firstTagKey, '<p>TEXT</p>', FORMAT_HTML)
tag_print_cloud()
usergetdate(time())
userdate(make_timestamp($y, $m), "Current user time")
make_timestamp()
usertime()
usergetdate()
usergetmidnight()
usertimezone()
get_user_timezone_offset()
format_time()
get_timezone_offset()
dst_changes_for_year()
dst_offset_on()
find_day_in_month()
days_in_month()
dayofweek()
set_module_viewed($cm)
optional_param('itemnumber', 0, PARAM_INT)
$CFG->dbtype
$CFG->dblibrary
$CFG->dbhost
$CFG->dbname
$CFG->dbuser
$CFG->dbpass
$CFG->prefix
$CFG->dboptions
$CFG->wwwroot
$CFG->dataroot
$CFG->directorypermissions
$CFG->admin
$CFG->dirroot